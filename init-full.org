#+TITLE: Brian Stiles' Emacs configuration
#+OPTIONS: toc:4 h:4

* Configuration
#+begin_src emacs-lisp :results silent
   (unless noninteractive (message "Loading %s..." load-file-name))
#+end_src

** init.el and the general initialization flow
=init.el= is the start of the configuration. It contains a few global
definitions used commonly, such as the location of my config files and
some helpers to set key bindings. It also loads machine-specific
configuration and overrides Custom's configuration file location.

If the Emacs instance is older than 24.4, only =init-minimal.el= is
loaded. Otherwise, full configuration continues.

*** Minimal configuration
=init-minimal.el= just creates a few thin wrappers for often-used
functions or commands and assigns a number of global key bindings. The
intent is to capture the most used settings, key bindings, etc. to
make basic editing comfortable and that require no additional software
to be installed

*** Full configuration
Full configuration starts in =init.el= by loading =package=,
=use-package=, =org=, and =org-dotemacs= just prior to handing control
to this file, =init-full.org=.

*** Package management
Packages are generally loaded from the ELPA package management
infrastructure, but via =use-package= so that the manifest is encoded
in the configuration source files, rather than manual usage of the
package manager. This should make it easier to set up new machines.

*** Setting up a new machine
All configuration files are stored in =MY-EMACS-CONFIG-DIR=. This
directory is managed as a Git repository. The directory can be cloned
to a new machine in =MY-EMACS-CONFIG-DIR= (usually under
=~/.emacs.d=).  There is a shell script named =setup.sh= in the config
dir that can be used to link =init.el= into =~/.emacs.d= and to
configure the machine identifier used to select machine-specific
configuration.

All package management is done via config files via =use-package=, so
dependencies should be automatically installed on first run.

*** Machine-specific configuration
Machine-specific configuration is stored in files in
=MY-EMACS-CONFIG-DIR= named =local-config-<MACHINE>.el=. The
appropriate file is determined by =machine-identifier.el= created by
=setup.sh= in =~/.emacs.d=.

*** Content

**** init.el
#+INCLUDE: "init.el" src emacs-lisp

**** init-minimal.el
#+INCLUDE: "init-minimal.el" src emacs-lisp

** Personal information
#+begin_src emacs-lisp :results silent
  (setq user-full-name "Brian Stiles"
        user-mail-address "bstiles@bstiles.net")
#+end_src

** Key bindings
Key bindings should be set with =my-global-set-key= or =my-define-key=
(defined in =init.el=) which are thin wrappers around =global-set-key=
and =define-key= that track the bindings for easy description with
=my-describe-key-bindings=. All key bindings that I have set can be
viewed with =my-describe-key-bindings=.

*** Machine-specific file key bindings (machine)
Use the macro =my-make-find-file-fn= defined in =init.el= to create
key bindings for often used files. These are typically appropriate for
use in machine-specific configurations since they are file path
dependent. Define bindings like so:

#+begin_example :results silent
  (my-make-find-file-fn my-file-org-work "/path/to/file)
#+end_example

See =local-config-Brians-MacBook-Pro.el= for examples.

*** Global keybindigs (full)

**** File access bindings
#+begin_src emacs-lisp :results silent
  (my-make-find-file-fn my-file-init-full-org (expand-file-name "init-full.org" my-emacs-config-dir))
  (my-global-set-key "C-c g e" 'my-file-init-full-org)
  (my-global-set-key "C-c g E f" 'my-file-init-full-org)

  (my-make-find-file-fn my-file-emacs-config-dir my-emacs-config-dir)
  (my-global-set-key "C-c g E e" 'my-file-emacs-config-dir)
#+end_src

**** Uncategorized
#+begin_src emacs-lisp :results silent
  ; XXX
  (my-global-set-key "C-." 'company-complete-common)
  (my-global-set-key "<f5>" 'company-complete-common) ; For terminals (mapped to C-. in iTerm2)
  ;; XXX Tie to mode/terminal type
  (my-global-set-key "C-c c" 'column-highlight-mode)
  (my-global-set-key "C-c C" 'my-set-colors)
  (my-global-set-key "C-c g G" 'my-rgrep-in-project)
  (my-global-set-key "C-c g s" 'my-buffer-shell)
  (my-global-set-key "C-c h b" 'helm-buffers-list)
  (my-global-set-key "C-c h i" 'helm-imenu)
  (my-global-set-key "C-c h p" 'helm-projectile)
  (my-global-set-key "C-c h P" 'my-helm-projectile)
  ;(my-global-set-key "C-c h g" 'my-helm-ls-git-ls)
  (my-global-set-key "C-c n c" 'cider-connect)
  (my-global-set-key "C-c n j" 'cider-jack-in)
  (my-global-set-key "C-c n n" 'nrepl-connection-browser)
  (my-global-set-key "C-c n q" 'cider-quit)
  (my-global-set-key "C-c n r" 'cider-switch-to-repl-buffer)
  (my-global-set-key "C-c n R" 'my-cider-reset)
  (my-global-set-key "C-c o A" 'org-align-all-tags)
  (my-global-set-key "C-c o a" 'org-agenda)
  (my-global-set-key "C-c o b h" 'my-hide-blocks-in-subtree)
  (my-global-set-key "C-c o b H" 'org-hide-block-all)
  (my-global-set-key "C-c o b s" 'my-show-blocks-in-subtree)
  (my-global-set-key "C-c o b S" 'org-show-block-all)
  (my-global-set-key "C-c o h h" 'my-helm-org-headlines)
  (my-global-set-key "C-c o h n" 'my-helm-org-named-blocks)
  (my-global-set-key "C-c o F" 'my-set-org-agenda-files)
  (my-global-set-key "C-c o l" 'orgstruct-mode)
  (my-global-set-key "C-c o t" 'orgtbl-mode)
  (my-global-set-key "C-c o T" 'my-org-table-to-gfm-table)
  (my-global-set-key "C-x C-b" 'helm-buffers-list)
  (my-global-set-key "C-x B" 'ibuffer)
  (my-global-set-key "C-M-S-h" 'auto-highlight-symbol-mode)
  (my-global-set-key "C-M-S-q" 'my-indent-top-level-sexp)
  (my-global-set-key "C-M-z" 'my-toggle-window-width)
  (my-global-set-key "C-M-S-z" 'my-toggle-window-height)
  (my-global-set-key "M-`" 'other-frame)
  (my-global-set-key "M-~" 'my-other-frame-reverse)
#+end_src

** Org customizations

*** Set agenda files for current project
#+begin_src emacs-lisp :results silent
  (require 'find-lisp)
  (require 'projectile)
  (defun my-set-org-agenda-files ()
    (interactive)
    (let ((files (find-lisp-find-files (projectile-project-root) "\.org$")))
      (setq org-agenda-files files)
      (message "%s agenda file%s."
               (length files)
               (if (= 1 (length files))
                   "" "s"))))
#+end_src

** File system
#+begin_src emacs-lisp :results silent
  (require 'dired-x)
#+end_src
** HTML
#+begin_src emacs-lisp :results silent
  ;; - Handles syntax highlighted for org-html-export.  Exports buffers to
  ;; - syntax highlighted html.
  (use-package htmlize
    :ensure t
    :pin marmalade)

  (defun my-html-template ()
    "Adds boilerplate to the current buffer suitable for an HTML file."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (let ((template-buffer (find-file-noselect "~/bin/00_HTML_TEMPLATE.html"))
            start
            end)
        (save-excursion
          (set-buffer template-buffer)
          (setq start (point-min) end (point-max)))
        (insert-buffer-substring template-buffer start end)
        (kill-buffer template-buffer))))
#+end_src

** Go Programming
#+begin_src emacs-lisp :results silent
  (use-package go-mode
    :ensure t
    :pin melpa)
#+end_src

** Chores/Emacs hygiene

*** Midnight mode
For cleaning up buffers not recently used. Provides
=clean-buffer-list= which kills old buffers that have not been
displayed recently.
#+begin_src emacs-lisp :results silent
  (require 'midnight)
#+end_src

** Dockerfiles
#+begin_src emacs-lisp :results silent
  (use-package dockerfile-mode
    :ensure t
    :pin melpa)
#+end_src
